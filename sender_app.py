import streamlit as st
import requests
import json
from datetime import datetime

# Configuraci√≥n b√°sica de Streamlit
try:
    st.set_page_config(
        page_title="WhatsApp API Sender",
        page_icon="üì±",
        layout="wide"
    )
except Exception as e:
    st.error(f"Error configurando p√°gina: {e}")

# T√≠tulo principal
st.title("üì± WhatsApp API Message Sender")
st.markdown("---")

# Inicializar session state
if 'message_history' not in st.session_state:
    st.session_state.message_history = []

# Funci√≥n simple para enviar mensaje template
def send_template_message(to, token, business_id, template_name="hello_world"):
    url = f"https://graph.facebook.com/v22.0/{business_id}/messages"
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    data = {
        "messaging_product": "whatsapp",
        "to": to,
        "type": "template",
        "template": {
            "name": template_name,
            "language": {
                "code": "en_US"
            }
        }
    }
    
    try:
        response = requests.post(url, headers=headers, json=data)
        return response.status_code, response.text
    except requests.exceptions.RequestException as e:
        return None, f"Error de conexi√≥n: {str(e)}"
    except Exception as e:
        return None, f"Error inesperado: {str(e)}"

# Funci√≥n para enviar mensaje de texto
def send_text_message(to, token, business_id, message_text):
    url = f"https://graph.facebook.com/v22.0/{business_id}/messages"
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    data = {
        "messaging_product": "whatsapp",
        "to": to,
        "type": "text",
        "text": {
            "body": message_text
        }
    }
    
    try:
        response = requests.post(url, headers=headers, json=data)
        return response.status_code, response.text
    except requests.exceptions.RequestException as e:
        return None, f"Error de conexi√≥n: {str(e)}"
    except Exception as e:
        return None, f"Error inesperado: {str(e)}"

# Layout principal con columnas
col1, col2 = st.columns([2, 1])

with col1:
    st.header("‚öôÔ∏è Configuraci√≥n")
    
    # Campos de configuraci√≥n principales
    phone_number = st.text_input(
        "N√∫mero de tel√©fono (con c√≥digo de pa√≠s)",
        value="525525604014",
        help="Ejemplo: 525525604014"
    )
    
    business_phone_id = st.text_input(
        "Business Phone Number ID",
        value="739761142555717"
    )
    
    access_token = st.text_area(
        "Access Token de WhatsApp",
        value="EAAbWYaIAxX0BPZAyicBZBt2nRDcChNmKwiCAp4OpEtykYvZBkTiNaFmC8jVt6Q3aGHxt7FDW9Qy0y07DGfdyb7f5SEPLE3d4qZAsUr0Cvef9Bkwrdx6sXKZCzGNd1uqnBjcjmdxN0cfZBeL1F2SF4UAFRKGZBJw3cR8XDZCnMkJJjkd7D2sYyZBHmQctVaHrdqZAqlGFCCjcuR3ZCRpKZAR3zTHkpC69DiwqdSXRJ4M772GsFQZDZD",
        height=80
    )
    
    st.markdown("---")
    
    # Secci√≥n de env√≠o de template (como tu c√≥digo original)
    st.header("üì§ Enviar Template Hello World")
    
    if st.button("Enviar Template Hello World", type="primary"):
        if not phone_number or not access_token or not business_phone_id:
            st.error("‚ùå Por favor completa todos los campos")
        else:
            with st.spinner("Enviando mensaje..."):
                status_code, response_text = send_template_message(
                    phone_number, 
                    access_token, 
                    business_phone_id
                )
                
                # Agregar al historial
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                st.session_state.message_history.append({
                    'timestamp': timestamp,
                    'to': phone_number,
                    'type': 'template',
                    'template': 'hello_world',
                    'status': status_code,
                    'response': response_text
                })
                
                if status_code == 200:
                    st.success("‚úÖ Template enviado correctamente!")
                    try:
                        response_json = json.loads(response_text)
                        st.json(response_json)
                    except:
                        st.text(f"Respuesta: {response_text}")
                else:
                    st.error(f"‚ùå Error {status_code}")
                    st.text(f"Respuesta: {response_text}")
    
    st.markdown("---")
    
    # Secci√≥n de mensaje personalizado
    st.header("‚úâÔ∏è Enviar Mensaje de Texto")
    st.info("üí° Solo funciona si el usuario inici√≥ la conversaci√≥n primero")
    
    custom_message = st.text_area(
        "Mensaje personalizado",
        placeholder="Escribe tu mensaje aqu√≠..."
    )
    
    if st.button("Enviar Mensaje de Texto"):
        if not phone_number or not access_token or not business_phone_id or not custom_message:
            st.error("‚ùå Por favor completa todos los campos")
        else:
            with st.spinner("Enviando mensaje..."):
                status_code, response_text = send_text_message(
                    phone_number, 
                    access_token, 
                    business_phone_id,
                    custom_message
                )
                
                # Agregar al historial
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                st.session_state.message_history.append({
                    'timestamp': timestamp,
                    'to': phone_number,
                    'type': 'text',
                    'message': custom_message,
                    'status': status_code,
                    'response': response_text
                })
                
                if status_code == 200:
                    st.success("‚úÖ Mensaje enviado correctamente!")
                    try:
                        response_json = json.loads(response_text)
                        st.json(response_json)
                    except:
                        st.text(f"Respuesta: {response_text}")
                else:
                    st.error(f"‚ùå Error {status_code}")
                    st.text(f"Respuesta: {response_text}")

with col2:
    st.header("üìä Estado")
    
    # Mostrar estado actual
    if phone_number:
        st.success(f"üìû N√∫mero: {phone_number}")
    else:
        st.warning("üìû No hay n√∫mero")
    
    if business_phone_id:
        st.success(f"üì± Business ID configurado")
    else:
        st.warning("üì± Falta Business ID")
    
    if access_token:
        st.success("üîê Token configurado")
    else:
        st.warning("üîê Falta token")
    
    st.markdown("---")
    
    # Informaci√≥n √∫til
    st.subheader("üí° C√≥digos de Estado")
    st.markdown("""
    - **200**: ‚úÖ √âxito
    - **400**: ‚ùå Solicitud incorrecta  
    - **401**: ‚ùå No autorizado
    - **403**: ‚ùå Prohibido
    - **404**: ‚ùå No encontrado
    """)

# Historial de mensajes
st.markdown("---")
st.header("üìú Historial de Mensajes")

if st.session_state.message_history:
    for i, msg in enumerate(reversed(st.session_state.message_history[-5:])):  # Mostrar √∫ltimos 5
        with st.expander(f"Mensaje {i+1} - {msg['timestamp']}"):
            st.write(f"**Para:** {msg['to']}")
            st.write(f"**Tipo:** {msg['type']}")
            if msg['type'] == 'template':
                st.write(f"**Template:** {msg['template']}")
            else:
                st.write(f"**Mensaje:** {msg['message']}")
            
            if msg['status'] == 200:
                st.success(f"Estado: {msg['status']} ‚úÖ")
            else:
                st.error(f"Estado: {msg['status']} ‚ùå")
            
            with st.expander("Ver respuesta completa"):
                st.text(msg['response'])
else:
    st.info("üì≠ No hay mensajes enviados a√∫n")

# Bot√≥n para limpiar historial
if st.button("üóëÔ∏è Limpiar Historial") and st.session_state.message_history:
    st.session_state.message_history = []
    st.success("Historial limpiado")
    st.rerun()

# Footer
st.markdown("---")
st.markdown("üöÄ **WhatsApp API Interface** - Versi√≥n simplificada")

#activar en consola: conda activate mi-entorno, cd (ruta del proyecto) y streamlit run sender_app.py
